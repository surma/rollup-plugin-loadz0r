/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// If the loader is already loaded, just stop.
if (!self.define) {
  const singleRequire = async name => {
    if (!registry[name]) {
      <% if (useEval) { %>
        const code = await fetch(name).then(resp => resp.text());
        eval(code);
      <% } else { %>
        await new Promise(async resolve => {
          if ("document" in self) {
            const script = document.createElement("script");
            <% if (publicPath && typeof publicPath === 'string') { %>
              script.src = <%- "'" + publicPath + "' + name.slice(1)" %>
            <% } else if (publicPath && typeof publicPath === 'function') { %>
              script.src = <%- "(" + publicPath.toString() + ")() + name.slice(1)" %>
            <% } else { %>
              script.src = name;
            <% } %>

            // Ya never know
            script.defer = true;
            document.head.appendChild(script);
            script.onload = resolve;
          } else {
            importScripts(name);
            resolve();
          }
        });
      <% } %>

      if (!registry[name]) {
        throw new Error(`Module ${name} didnâ€™t register its module`);
      }
    }
    return registry[name];
  };

  const require = async (names, resolve) => {
    const modules = await Promise.all(names.map(singleRequire));
    resolve(modules.length === 1 ? modules[0] : modules);
  };

  const registry = {
    require: Promise.resolve(require)
  };

  self.define = (moduleName, depsNames, factory) => {
    if (registry[moduleName]) {
      // Module is already loading or loaded.
      return;
    }
    registry[moduleName] = new Promise(async resolve => {
      let exports = {};
      const module = {
        <% if (publicPath && typeof publicPath === 'string') { %>
          uri: location.origin + <%- "'" + publicPath + "' + moduleName.slice(1)" %>
        <% } else if (publicPath && typeof publicPath === 'function') { %>
          uri: location.origin + <%- "(" + publicPath.toString() + ")() + name.slice(1)" %>
        <% } else { %>
          uri: location.origin + moduleName.slice(1)
        <% } %>
      };
      const deps = await Promise.all(
        depsNames.map(depName => {
          if (depName === "exports") {
            return exports;
          }
          if (depName === "module") {
            return module;
          }
          return singleRequire(depName);
        })
      );
      const facValue = factory(...deps);
      if(!exports.default) {
        exports.default = facValue;
      }
      resolve(exports);
    });
  };
}
